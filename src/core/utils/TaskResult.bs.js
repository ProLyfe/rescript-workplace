// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Task from "./Task.bs.js";
import * as Curry from "@rescript/std/lib/es6/curry.js";
import * as Belt_Result from "@rescript/std/lib/es6/belt_Result.js";

function make(comp) {
  return function (param) {
    return Task.make(comp, param);
  };
}

function pure(result) {
  return function (param) {
    return Task.pure(result, param);
  };
}

function fork(task) {
  return function (param) {
    return Task.fork(task, param);
  };
}

function forkSwitch(tr, onOk, onErr) {
  return Task.fork(tr, (function (r) {
                if (r.TAG === /* Ok */0) {
                  return Curry._1(onOk, r._0);
                } else {
                  return Curry._1(onErr, r._0);
                }
              }));
}

function map(task, f) {
  return function (param) {
    return Task.map(task, (function (__x) {
                  return Belt_Result.map(__x, f);
                }), param);
  };
}

function mapError(task, f) {
  return function (param) {
    return Task.map(task, (function (x) {
                  if (x.TAG === /* Ok */0) {
                    return {
                            TAG: /* Ok */0,
                            _0: x._0
                          };
                  } else {
                    return {
                            TAG: /* Error */1,
                            _0: Curry._1(f, x._0)
                          };
                  }
                }), param);
  };
}

function flatMap(task, f) {
  return function (param) {
    return Task.flatMap(task, (function (x) {
                  if (x.TAG === /* Ok */0) {
                    return Curry._1(f, x._0);
                  }
                  var partial_arg = {
                    TAG: /* Error */1,
                    _0: x._0
                  };
                  return function (param) {
                    return Task.pure(partial_arg, param);
                  };
                }), param);
  };
}

function product(task1, task2) {
  return Task.map2(task1, task2, (function (a, b) {
                if (a.TAG === /* Ok */0) {
                  if (b.TAG === /* Ok */0) {
                    return {
                            TAG: /* Ok */0,
                            _0: [
                              a._0,
                              b._0
                            ]
                          };
                  } else {
                    return {
                            TAG: /* Error */1,
                            _0: b._0
                          };
                  }
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: a._0
                        };
                }
              }));
}

function map2(task1, task2, f) {
  return map(product(task1, task2), (function (param) {
                return Curry._2(f, param[0], param[1]);
              }));
}

var from = Task.from;

var tap = Task.tap;

export {
  from ,
  make ,
  pure ,
  fork ,
  forkSwitch ,
  map ,
  mapError ,
  tap ,
  flatMap ,
  product ,
  map2 ,
  
}
/* No side effect */
